LINK: https://github.com/sippohippo/cybersecuritybase-project1/ 

This submission uses the OWASP 2021 list.

This app was done with Python and Flask, and is based on a PostgreSQL database. The README file in the linked repository above has detailed instructions for installing, setting up and running the app. In short, you need to have a command line available and PostgreSQL installed. Follow the steps below:

1. Install PostgreSQL if you do not have it already: https://www.postgresql.org/download/

2. Clone this repository and go to the newly created directory with

	git clone https://github.com/sippohippo/cybersecuritybase-project1
 
	cd cybersecuritybase-project1

3. This step is optional. If you are not using the default postgres database_url postgresql://localhost then change it to the correct one by opening the .env file and modifying the respective line there.

4. Activate a virtual environment and install dependencies:

	python3 -m venv venv
	source venv/bin/activate
	pip install -r ./requirements.txt

5. Setup the database and populate it with the data. Note, you need to change the image file addresses to your local ones in lines 5-10 in the test data! More specifically, go to the test_images folder, see what your address to each file is and change the respective address in the data.sql file. This would be done by replacing /Users/sippo/ with your own address and location where you cloned the repository.

	psql < schema.sql
	psql < data.sql

6. Start the app with the command flask run while inside the virtual environment:

	flask run

7. Open the app by following the link in the console (http://127.0.0.1:5000 in your browser)


FLAW 1: A01:2021 – Broken Access Control
Link: https://github.com/sippohippo/cybersecuritybase-project1/blob/main/routes.py#L77C1-L77C1

Description: The admin page and remove users page should be accessible only by admins. The pages are created by the admin() and remove() functions in routes.py. However, now with force browsing and guessing an easily guessable url adding only to the end /admin the user can access the admin panel and see information that they should not see and even remove users by guessing /remove.

How to fix: This can be fixed by making all the contents of the admin pages being calculated and rendered only if the logged in session is with an admin account and otherwise the user is sent to an error page. The code that fixes this is commented out and directly below the admin() and remove() functions in routes.py. The current code in the function should be replace with the commented out code. 


FLAW 2: A02:2021 – Cryptographic Failures 
Link: https://github.com/sippohippo/cybersecuritybase-project1/blob/main/usertools.py#L36C10-L36C10

Description: Passwords are currently being stored as plaintext in the database, which is extremely bad and if the database were to leak the attacker would have direct access to this information. This can be seen from the function newuser() in the usertools.py file. 

This is fixed by adding hashing to the newuser function with a high quality library that will also salt the passwords. The fix can be done with Werkzeug. First we import the library which is commented out in the top of the usertools.py file:
from werkzeug.security import check_password_hash, generate_password_hash
Then we add password = generate_password_hash(password) and now all password that are stored in the database are hashed and no longer plaintext. Next we modify the login function to also have the hashed password check. Modifications commented out on lines 17 and 31 of usertools.py. For more information about the used library and to check that is indeed secure, please see https://techmonger.github.io/4/secure-passwords-werkzeug/. 


FLAW 3: A03:2021 – Injection
Link: https://github.com/sippohippo/cybersecuritybase-project1/blob/main/usertools.py#L36C10-L36C10

Description: The newuser() function in usertools.py has been written so that there is no sanitizing or parameterization of the user's input. This means that this form is vulnerable to SQL injections. This can be tested by running the app and selecting Log in and testing the following injection in place of the username the following injection:
test'); DROP TABLE users CASCADE; --'
This injection would drop the entire table. Note, if you decide to test the injection and drop the table, you will need to inside postgreSQL reinsert the table and rows. This is easiest done by within the postgreSQL by using:
	drop schema public cascade; 
	create schema public;
and then runnig again in the console the following:
	psql < schema.sql
	psql < data.sql

How to fix: This can be fixed by the commented out code below the existing function newuser() in usertools, where the input (email) is safely entered as a parameter into the query, resulting in it being a string and not interpreting the additional command. Now the injection will not work. More information about parameterization can be found here: https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html. 


FLAW 4: A05:2021 – Security Misconfiguration
Link: https://github.com/sippohippo/cybersecuritybase-project1/blob/main/data.sql#L22C5-L22C5

Description: The default admin user credentials are username: admin and password: admin. These are inseted into the app as the data needed in other parts are populated. This could be used for testing purposes, but should never make it to a production app.

How to fix: This can be fixed by removing the last line (22) from the data.sql file, and instead after creating a new account with a better name and password, entering the accounts name into the file makeaccountadmin.sql using the script to convert it. Then in the command line use psql < makeaccountadmin.sql to convert an account to an admin account.


FLAW 5: CSRF - Outside of OWASP list as permitted by the assignment Link: https://github.com/sippohippo/cybersecuritybase-project1/blob/main/templates/removeuser.html and  https://github.com/sippohippo/cybersecuritybase-project1/blob/main/templates/removeuser.html#L23 and https://github.com/sippohippo/cybersecuritybase-project1/blob/main/routes.py#L112  

Description: There is a CSRF vulnerability which is particularly nasty with the /remove page and thus templates/removeuser.html file, as through this an attacker could control the delete users form. There is a form with no CSRF token check in the html page and in the backend (routes.py).  

How to fix: This is fixed by adding a hidden input to the form that checks the session.csrf_token, which is commented in line 23 of removeuser.html, and to the backend (routes.py) by adding there the CSRF check under POST, which is done in lines 112-113. The csrf_token itself is generated every time a user logs in by the login function in usertools.py.   




